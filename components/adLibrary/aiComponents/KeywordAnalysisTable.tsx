import React, { useState } from "react";
import { ChevronDown, ChevronUp, Info } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AdAnalysis } from "@/app/actions/geminiAiService";

interface KeywordAnalysisTableProps {
  data: AdAnalysis | null;
  isLoading: boolean;
  error: string | null;
}

const KeywordAnalysisTable: React.FC<KeywordAnalysisTableProps> = ({
  data,
  isLoading,
  error,
}) => {
  const [expanded, setExpanded] = useState(false);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-8 text-gray-500 dark:text-gray-400">
        <div className="mr-3 h-8 w-8 animate-spin rounded-full border-b-2 border-t-2 border-purple-500"></div>
        Analyzing keywords...
      </div>
    );
  }

  if (error) {
    return (
      <div
        className="border-l-4 border-red-500 bg-red-100 p-4 text-red-700 dark:bg-red-900 dark:text-red-300"
        role="alert"
      >
        <p className="font-bold">Error</p>
        <p>{error}</p>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="py-8 text-center text-gray-500 dark:text-gray-400">
        No keyword data available
      </div>
    );
  }

  const displayCount = expanded
    ? Math.max(data.topKeywords.length, data.longTailKeywords.length)
    : 5;

  const InsightItem = ({
    label,
    value,
  }: {
    label: string;
    value: string | string[] | number;
  }) => (
    <div className="text-sm">
      <span className="font-medium text-gray-700 dark:text-gray-300">
        {label}:
      </span>{" "}
      <span className="text-gray-800 dark:text-gray-200">
        {Array.isArray(value)
          ? value.length > 0
            ? value.join(", ")
            : "Not specified"
          : value || "Not specified"}
      </span>
    </div>
  );

  return (
    <div className="space-y-4">
      <div className="space-y-3 rounded-lg bg-gray-50 p-4 dark:bg-gray-800">
        <h3 className="mb-2 flex items-center text-lg font-semibold text-gray-900 dark:text-gray-100">
          AI-Powered Ad Insights
          <Info className="ml-2 h-4 w-4 text-gray-500 dark:text-gray-400" />
        </h3>

        <div className="grid grid-cols-1 gap-3 md:grid-cols-2">
          <InsightItem label="Target Gender" value={data.genderTarget} />
          <InsightItem label="Target Age Range" value={data.ageTarget} />
          <InsightItem label="Ad Categories" value={data.adCategories} />
          <InsightItem label="Target Audience" value={data.targetAudience} />
          <InsightItem label="Estimated Budget" value={data.estimatedBudget} />
          <InsightItem label="Ad Objectives" value={data.adObjective} />
          <InsightItem
            label="Marketing Strategy"
            value={data.marketingStrategies}
          />
          <InsightItem label="Season" value={data.seasonTarget} />
          <InsightItem label="Competition" value={`${data.competition}%`} />
          <InsightItem label="CPM" value={`$${data.cpm}`} />
        </div>

        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
          These insights are generated by our advanced AI analysis of the ad
          content. While highly accurate, they represent our best interpretation
          and may not exactly match the advertiser's internal strategy.
        </p>
      </div>

      <Table className="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700">
        <TableHeader className="bg-gray-100 dark:bg-gray-800">
          <TableRow>
            <TableHead className="w-[45%] text-gray-700 dark:text-gray-300">
              Top Focus Keywords
            </TableHead>
            <TableHead className="w-[10%] text-gray-700 dark:text-gray-300">
              Count
            </TableHead>
            <TableHead className="w-[35%] text-gray-700 dark:text-gray-300">
              Long-Tail Keywords
            </TableHead>
            <TableHead className="w-[10%] text-gray-700 dark:text-gray-300">
              Count
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {Array.from({ length: displayCount }).map((_, index) => (
            <TableRow
              key={index}
              className="hover:bg-gray-50 dark:hover:bg-gray-700"
            >
              <TableCell className="max-w-[200px] truncate text-gray-800 dark:text-gray-200">
                {data.topKeywords[index]?.word || ""}
              </TableCell>
              <TableCell className="text-gray-800 dark:text-gray-200">
                {data.topKeywords[index]?.count || ""}
              </TableCell>
              <TableCell className="max-w-[200px] truncate text-gray-800 dark:text-gray-200">
                {data.longTailKeywords[index]?.phrase || ""}
              </TableCell>
              <TableCell className="text-gray-800 dark:text-gray-200">
                {data.longTailKeywords[index]?.count || ""}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      {Math.max(data.topKeywords.length, data.longTailKeywords.length) > 5 && (
        <Button
          onClick={() => setExpanded(!expanded)}
          variant="outline"
          className="w-full bg-white text-gray-700 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
        >
          {expanded ? (
            <>
              Show Less <ChevronUp className="ml-2 h-4 w-4" />
            </>
          ) : (
            <>
              Show More <ChevronDown className="ml-2 h-4 w-4" />
            </>
          )}
        </Button>
      )}
    </div>
  );
};

export default KeywordAnalysisTable;
